#include <ts_util/ts_util.hpp>

#include <boost/lexical_cast.hpp>
#include <boost/program_options.hpp>
#include <boost/foreach.hpp>

#include <iostream>
#include <cassert>
#include <cstdio>
#include <set>
#include <string>
#include <vector>

//  g++ packet_replacer.cpp -lts_util -lboost_system -lboost_program_options -lboost_filesystem


using ts_util::TransportStream;
using ts_util::TSPacket;
using std::cout;
using std::endl;
using std::set;
using std::string;
using std::vector;
using boost::lexical_cast;
using boost::program_options::options_description;
using boost::program_options::value;

namespace po = boost::program_options;

int64_t bytes_read = 0;



void replacePackets(TransportStream &inputTS, TransportStream &outputTS, vector<TSPacket> &vts){
	while (inputTS.hasPacket()){
		TSPacket packetToWrite = inputTS.getCurrentPacket();
		inputTS.next();
		int pid = packetToWrite.getPID();

		for (int i = 0; i < vts.size(); i++){
			if (vts[i].getPID() == pid){
				packetToWrite = vts[i];
			}
		}
		outputTS.writePacketInPosition( packetToWrite );
		outputTS.next();
	}
}


int main (int argc, char** argv)
{

	options_description desc("Allowed options");
	desc.add_options()
		("help", "produce help message")
		("sourcets,sts", value<string>()->required(), "ts file which will be modified of which packets will be modified")
		("outputts,ots", value<string>()->required(), "ts file generated by the replacing of packets")
		("packet,p", value< vector<string> >()->multitoken()->required(), "ts files containing packets to replace into the original ts, generating a new one with different packets.");

	po::variables_map vm;
	po::store(po::parse_command_line(argc, argv, desc), vm);

	if (vm.count("help")){
		cout << desc << '\n';
		return 0;
	}
	po::notify(vm);


	vector<TSPacket> vts;

	BOOST_FOREACH(string s, vm["packet"].as<vector<string> >()){
		{
			if (TransportStream(s).getSizeInPackets() != 1){
				cout << "Esta version de packet replacer funciona solo para secciones que ocupan un único paquete.\n";
				cout << "El problema se encontró para el archivo '" << s << "'\n";
				return 0;
			}
		}
		vts.push_back(TransportStream(s).getCurrentPacket());
	}

	TransportStream tsInput(vm["sourcets"].as<string>());
	TransportStream tsOutput(vm["outputts"].as<string>(), true); // EL true es para forzar la creacion del
														     // archivo.

	replacePackets(tsInput, tsOutput, vts);
	
	return 0;
}






